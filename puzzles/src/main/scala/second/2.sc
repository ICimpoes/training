"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".zipWithIndex.map {
  case (c, i) =>
    val newc: Char =
      c match {
        case 'Z' | 'z' => 'a'
        case d if d.isDigit => (9 - d.asDigit).toString.head
        case x => (x + 1).toChar
      }
    if (i % 2 == 0) newc.toUpper
    else newc.toLower
}.reverse.foreach(print)


Thread.sleep(1000)